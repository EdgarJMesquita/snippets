{
	"React Native Component": {
	  "scope": "javascript, typescript, typescriptreact",
	  "prefix": "rnc",
	  "body": [
		"import React from 'react';",
		"import { View } from 'react-native';",
		"import { styles } from './styles';",
		"",
		"export function ${TM_DIRECTORY/.*[\\\\|\\/]+(.*)/$1/}(){",
		" return (",
		"   <View style={styles.container}>",
		"",
		"   </View>",
		" );",
		"}"
	  ],
	  "description": "Basic React Native Componente"
	},
  
	"React Native Style": {
	  "scope": "javascript, typescript",
	  "prefix": "rns",
	  "body": [
		"import { StyleSheet } from 'react-native';",
		"",
		"export const styles = StyleSheet.create({",
		" container: {",
		"   flex: 1",
		"  }",
		"});"
	  ],
	  "description": "Basic stylesheet for React Native"
	},
	"React Native Styled Components": {
	  "scope": "javascript, typescript, typescriptreact",
	  "prefix": "rnsc",
	  "body": [
		"import styled from 'styled-components/native';",
		"",
		"export const $1 = styled.$1`",
		"",
		"`"
	  ],
	  "description": "React Native with Styled Components"
	},
  
	
  
	"React useState": {
	  "scope": "javascript, typescript",
	  "prefix": "useState",
	  "body": ["const [${state}, set${setState}] = useState(${initialValue});"],
	  "description": "useState Hook"
	},
  
	"Create Repository": {
	  "scope": "typescript",
	  "prefix": "repository",
	  "body": [
		"import { EntityRepository, Repository } from 'typeorm';",
		"import { ${entity} } from '@entities/${entity}';",
		"",
		"@EntityRepository(${entity})",
		"class ${TM_FILENAME_BASE/(.*)/${1}/} extends Repository<${entity}> {}",
		"",
		"export {${TM_FILENAME_BASE/(.*)/${1}/}};"
	  ],
	  "description": "Create a repository"
	},
	"Create Controller": {
	  "scope": "typescript",
	  "prefix": "controller",
	  "body": [
		"import { Request, Response } from 'express';",
		"import { ${service}Service } from '@services/${service}Service';",
		"",
		"class ${TM_FILENAME_BASE/(.*)/${1}/} {",
		"  async handle(request: Request, response: Response){",
		"    const ${service}Service = new ${service}Service()",
		"  }",
		"}",
		"",
		"export {${TM_FILENAME_BASE/(.*)/${1}/}};"
	  ],
	  "description": "Create a controller"
	},
	"Create Service": {
	  "scope": "typescript",
	  "prefix": "service",
	  "body": [
		"import { getCustomRepository } from 'typeorm'",
		"import { ${repository}Repositories } from '@repositories/${repository}Repositories';",
		"",
		"interface I${TM_FILENAME_BASE/(.*)/${1}/}{",
		"",
		"}",
		"",
		"class ${TM_FILENAME_BASE/(.*)/${1}/} {",
		"  async execute({}:I${TM_FILENAME_BASE/(.*)/${1}/}){",
		"    const ${repository}Repositories = getCustomRepository(${repository}Repositories);",
		"",
		"  }",
		"}",
		"",
		"export {${TM_FILENAME_BASE/(.*)/${1}/}};"
	  ],
	  "description": "Create a service"
	},
	"Create Pagination": {
	  "scope": "typescript",
	  "prefix": "pagination",
	  "body": [
		"async execute({",
		"  page = '1',",
		"  search,",
		"  created_at,",
		"}: ${interface}) {",
		"  if (${condition}) throw new Error(${message});",
		"",
		"",
		"  const offersRepositories = getCustomRepository(${repository});",
		"",
		"  const currentPage = parseInt(page);",
		"  if (currentPage < 0) throw new Error('Page must be positive');",
		"  const take = 15;",
		"  const skip = ((currentPage < 1 ? 1 : currentPage) - 1) * take;",
		"",
		"  const where1 = new Map();",
		"",
		"  search && where1.set('${property}', Like(`%${}%`));",
		"",
		"  const [${entity}, total] = await ${repository}.findAndCount({",
		"    where: [Object.fromEntries(where1), Object.fromEntries(where2)],",
		"    relations: ['supplier'],",
		"    take,",
		"    skip,",
		"    order: {",
		"      id: 'DESC',",
		"    },",
		"  });",
		"",
		"  const totalShown = skip + ${entity}.length;",
		"  const to = totalShown <= total ? totalShown : 0;",
		"",
		"  const last_page = Math.ceil(total / take);",
		"",
		"  return {",
		"    page: currentPage,",
		"    data: instanceToPlain(${entity}),",
		"    last_page,",
		"    per_page: take,",
		"    to,",
		"    total,",
		"  };",
		"}"
	  ],
	  "description": "Create a service"
	}
  }
